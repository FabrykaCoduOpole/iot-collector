run mqtt-service
--------------------------------
# Start the services
docker-compose up -d

# Check if services are running
docker-compose ps

# View logs
docker-compose logs -f

test mqtt-service
---------------------------------
# Publish a test message
mqtt pub -t 'sensors/device1/data' -h 'localhost' -m '{"deviceId":"device1","temperature":25.5,"humidity":60}'
# Check the logs to see if the message was received
docker-compose logs mqtt-service

# Connect to the PostgreSQL database
docker-compose exec postgres psql -U postgres -d iot_data

# Inside PostgreSQL, query the data
SELECT * FROM sensor_data;


-----------------------------------

# Zatrzymaj kontenery
docker-compose down

# Usuń wolumen PostgreSQL, aby wymusić ponowne utworzenie bazy danych
docker volume rm zeatask_postgres_data

# Uruchom kontenery
docker-compose up -d

-----------------------------------

# Połącz się z bazą danych PostgreSQL
docker-compose exec postgres psql -U postgres -d iot_data

# W konsoli PostgreSQL wykonaj zapytanie
\dt


CREATE TABLE IF NOT EXISTS sensor_data (
  id SERIAL PRIMARY KEY,
  device_id VARCHAR(50) NOT NULL,
  topic VARCHAR(100) NOT NULL,
  data JSONB NOT NULL,
  timestamp TIMESTAMP NOT NULL
);

CREATE INDEX idx_sensor_data_device_id ON sensor_data(device_id);
CREATE INDEX idx_sensor_data_timestamp ON sensor_data(timestamp);


------------------------------------

# Wyślij testową wiadomość MQTT
mqtt pub -t 'sensors/device1/data' -h 'localhost' -m '{"deviceId":"device1","temperature":25.5,"humidity":60}'

# Sprawdź logi MQTT Service
docker-compose logs mqtt-service

# Połącz się z bazą danych PostgreSQL
docker-compose exec postgres psql -U postgres -d iot_data

# W konsoli PostgreSQL wykonaj zapytanie
SELECT * FROM sensor_data;


------------------------------------

┌─────────────────────────────────────────────────────────────────┐
│                        IoT Data Collector System                │
├─────────────────────────────────────────────────────────────────┤
│  IoT Devices → MQTT Broker → API Gateway → Microservices       │
│                     ↓                           ↓               │
│               Message Queue              Database Layer          │
│                     ↓                           ↓               │
│            Monitoring & Observability    Data Processing        │
└─────────────────────────────────────────────────────────────────┘


| Component              | Local Version         | AWS Cloud Equivalent |
| ---------------------- | --------------------- | -------------------- |
| MQTT Broker            | Mosquitto (Docker)    | AWS IoT Core         |
| REST API Backend       | Node.js / Python / Go | Same container       |
| Database               | PostgreSQL / MongoDB (Docker)   | AWS RDS / DynamoDB   |
| Monitoring             | Prometheus + Grafana  | Prometheus + Grafana |
| Kubernetes             | minikube / kind       | AWS EKS              |
| Infrastructure as Code | -                     | Terraform or AWS CDK |
| CI/CD                  | Gi


------------------------------------------------------------------------
IAC

The VPC module we've created will provide:

A VPC with DNS support enabled
2 public subnets (for load balancers and public-facing resources)
2 private subnets (for EKS nodes and application components)
2 database subnets (for RDS PostgreSQL)
An Internet Gateway for public internet access
A NAT Gateway for private subnets to access the internet
Appropriate route tables and associations



------------------------------------------------------------------------
In the next steps, we'll add modules for:
EKS (Kubernetes cluster)
RDS (PostgreSQL database)
IoT Core (MQTT broker)
ECR (Container repositories)
Monitoring with Prometheus and Grafana


-----------------------------------------------------------------------------

AWS infrastructure for your IoT Data Collector system. In this step, we have:

Created the EKS module to establish the Kubernetes cluster
Set up IAM roles and policies for the EKS cluster and node group
Configured security groups for the EKS cluster and nodes
Updated the main configuration to include the EKS module
Added outputs for the EKS cluster
The EKS module we've created will provide:

An EKS cluster running Kubernetes version 1.28
A node group with 2 t3.medium instances (scalable from 1 to 5)
IAM roles and policies for the EKS cluster and node group
Security groups for the EKS cluster and nodes
Both private and public endpoint access for the EKS API server